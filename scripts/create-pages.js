const fs = require("fs").promises;
const path = require("path");

const PROJECT_PAGE_TEMPLATE = `import { Card } from "@/components/ui/card"
import Link from 'next/link'
import { projects } from '@/lib/projects'

const projectPages = projects.find(p => p.slug === '%SLUG%')?.pages || []

export default function %COMPONENT_NAME%Page() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-8">%TITLE% - –û–±–∑–æ—Ä</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {projectPages.map((page) => (
          <Card key={page.path} className="p-6 hover:bg-accent transition-colors">
            <Link href={page.path} className="block">
              <h2 className="text-xl font-semibold mb-2">{page.title}</h2>
              <p className="text-muted-foreground">
                –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞–∑–¥–µ–ª—É ‚Üí
              </p>
            </Link>
          </Card>
        ))}
      </div>
    </div>
  )
}`;

const PROJECT_LAYOUT_TEMPLATE = `"use client";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { projects } from "@/lib/projects";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import { ChevronLeft, ChevronRight, Menu, Home } from "lucide-react";
import { useState } from "react";

const project = projects.find((p) => p.slug === "%SLUG%");

export default function ProjectLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const pathname = usePathname();
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const currentPage = project?.pages.find((page) => page.path === pathname);

  return (
    <div className="h-screen max-h-screen overflow-hidden bg-[#e5e5e5] flex">
      {/* –°–∞–π–¥–±–∞—Ä */}
      <aside
        className={cn(
          "bg-white h-screen flex flex-col shadow-md",
          sidebarOpen ? "w-64" : "w-16"
        )}
      >
        {/* –õ–æ–≥–æ */}
        <div className="h-16 min-h-[4rem] border-b flex items-center px-4">
          <Link href="/" className="flex items-center space-x-2">
            <Home className="h-6 w-6 text-slate-600" />
            {sidebarOpen && (
              <span className="font-bold text-slate-800">bybytedemos</span>
            )}
          </Link>
        </div>

        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
        <div className="flex-1 py-4 px-2 overflow-y-auto">
          {project?.pages.map((page) => {
            const Icon = page.icon;
            const isActive = pathname === page.path;

            return (
              <Link
                key={page.path}
                href={page.path}
                className={cn(
                  "flex items-center space-x-2 px-3 py-2 rounded-lg transition-colors mb-1",
                  isActive
                    ? "bg-slate-800 text-white"
                    : "text-slate-600 hover:bg-slate-100"
                )}
              >
                <Icon className="h-5 w-5 shrink-0" />
                {sidebarOpen && <span>{page.title}</span>}
              </Link>
            );
          })}
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è */}
        <div className="border-t p-4">
          <Button
            variant="ghost"
            size="icon"
            onClick={() => setSidebarOpen(!sidebarOpen)}
            className="w-full flex items-center justify-center text-slate-600 hover:text-slate-800"
          >
            {sidebarOpen ? <ChevronLeft /> : <ChevronRight />}
          </Button>
        </div>
      </aside>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="flex-1 flex flex-col h-screen max-h-screen overflow-hidden">
        {/* –•–µ–¥–µ—Ä */}
        <header className="bg-white shadow-md">
          <div className="flex h-16 min-h-[4rem] items-center px-6 gap-4">
            <Button
              variant="ghost"
              size="icon"
              className="md:hidden"
              onClick={() => setSidebarOpen(!sidebarOpen)}
            >
              <Menu className="h-5 w-5" />
            </Button>
            <div>
              <h1 className="font-semibold text-slate-800">{project?.title}</h1>
              {currentPage && (
                <p className="text-sm text-slate-500">{currentPage.title}</p>
              )}
            </div>
          </div>
        </header>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
        <main className="flex-1 bg-white m-4 shadow-md p-6 overflow-auto">
          {children}
        </main>
      </div>
    </div>
  );
}`;

const PAGE_TEMPLATE = `// This page was auto-generated by create-pages script
// Path: %PATH%

export default function Page() {
  return (
    <div className="flex min-h-screen flex-col items-center justify-center p-4 text-center">
      <h1 className="text-3xl font-bold mb-4">%TITLE%</h1>
      <p className="text-gray-600">Path: %PATH%</p>
    </div>
  )
}`;

async function fileExists(path) {
  try {
    await fs.access(path);
    return true;
  } catch {
    return false;
  }
}

async function createDirectoryIfNotExists(dirPath) {
  try {
    await fs.mkdir(dirPath, { recursive: true });
  } catch (error) {
    if (error.code !== "EEXIST") throw error;
  }
}

async function createFile(filePath, content) {
  const exists = await fileExists(filePath);
  if (!exists) {
    await fs.writeFile(filePath, content, "utf8");
    console.log(`‚úÖ Created: ${filePath}`);
    return true;
  } else {
    console.log(`‚è≠Ô∏è  Skipped (already exists): ${filePath}`);
    return false;
  }
}
async function main() {
  try {
    const projectsFile = await fs.readFile(
      path.resolve(process.cwd(), "src/lib/projects.tsx"),
      "utf8"
    );

    const projectMatches = projectsFile.match(
      /{\s*slug:\s*"([^"]+)",\s*title:\s*"([^"]+)"/g
    );

    if (!projectMatches) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ–µ–∫—Ç—ã –≤ projects.tsx");
    }

    let created = 0;
    let skipped = 0;

    for (const projectMatch of projectMatches) {
      const slugMatch = projectMatch.match(/slug:\s*"([^"]+)"/);
      const titleMatch = projectMatch.match(/title:\s*"([^"]+)"/);

      if (slugMatch && titleMatch) {
        const slug = slugMatch[1];
        const title = titleMatch[1];
        const componentName = slug
          .split("-")
          .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
          .join("");

        // –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
        await createDirectoryIfNotExists(`src/app/${slug}`);

        // –°–æ–∑–¥–∞—ë–º layout.tsx
        const layoutContent = PROJECT_LAYOUT_TEMPLATE.replace(/%SLUG%/g, slug);
        const layoutCreated = await createFile(
          `src/app/${slug}/layout.tsx`,
          layoutContent
        );
        if (layoutCreated) created++;
        else skipped++;

        // –°–æ–∑–¥–∞—ë–º page.tsx (–≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–µ–∫—Ç–∞)
        const pageContent = PROJECT_PAGE_TEMPLATE.replace(/%SLUG%/g, slug)
          .replace(/%COMPONENT_NAME%/g, componentName)
          .replace(/%TITLE%/g, title);

        const pageCreated = await createFile(
          `src/app/${slug}/page.tsx`,
          pageContent
        );
        if (pageCreated) created++;
        else skipped++;

        // –°–æ–∑–¥–∞—ë–º –ø–æ–¥—Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const pathMatches = projectsFile.match(
          new RegExp(`path:\\s*"/${slug}/([^"]+)"`, "g")
        );
        if (pathMatches) {
          for (const pathMatch of pathMatches) {
            const path = pathMatch.match(/"([^"]+)"/)[1];
            const pathParts = path.split("/").slice(2); // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ (–ø—É—Å—Ç–æ–π –∏ slug)
            if (pathParts.length > 0) {
              const pagePath = pathParts.join("/");

              await createDirectoryIfNotExists(`src/app/${slug}/${pagePath}`);

              const subPageContent = PAGE_TEMPLATE.replace(
                /%PATH%/g,
                path
              ).replace(
                /%TITLE%/g,
                pathParts[pathParts.length - 1]
                  .split("-")
                  .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
                  .join(" ")
              );

              const subPageCreated = await createFile(
                `src/app/${slug}/${pagePath}/page.tsx`,
                subPageContent
              );
              if (subPageCreated) created++;
              else skipped++;
            }
          }
        }
      }
    }

    console.log("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    console.log(`üÜï –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${created}`);
    console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${skipped}`);
    console.log("\n‚ú® –ì–æ—Ç–æ–≤–æ!");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error);
    process.exit(1);
  }
}

main();
